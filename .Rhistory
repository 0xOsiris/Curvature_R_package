source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),0)
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),0)
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
dataSet= matrix(c(expression(1+.5*cos(t)),expression(1+.1*sin(t)),expression(-1)), nrow=1,ncol=3,byrow=TRUE)
alphaN=dataSet[1,]
curvature(alphaN, t)
d_util = new.env()
d_util$alphaDerivativeMat <- function(alpha, t){
#First deriveative of input curve
alphaP <- c(D(alpha[1],'t'), D(alpha[2],'t'),0)
#Second derivative of input curve
alphaDP <- c(D(D(alpha[1],'t'),'t'),D(D(alpha[2],'t'),'t'),0)
#Matrix containing vector expressions of first three derivatives of input curve
alphaPrimeMatrix <-matrix(
c(alpha,alphaP,alphaDP),
nrow=3,
ncol=3,
byrow=TRUE
)
print(alphaPrimeMatrix[1,])
print(alphaPrimeMatrix[2,])
print(alphaPrimeMatrix[3,])
dimnames(alphaPrimeMatrix)=list(c("alpha","alphaP","alphaDP"),c("X","Y","Z"))
return(alphaPrimeMatrix)
}
xprod_util = new.env()
xprod_util$xprod <- function(...) {
args <- list(...)
if (length(args) == 0) {
stop("No data supplied")
}
len <- unique(sapply(args, FUN=length))
if (length(len) > 1) {
stop("All vectors must be the same length")
}
if (len != length(args) + 1) {
stop("Must supply N-1 vectors of length N")
}
m <- do.call(rbind, args)
sapply(seq(len),
FUN=function(i) {
det(m[,-i,drop=FALSE]) * (-1)^(i+1)
})
}
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),0)
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),0)
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
curvature(alphaN, t)
dataSet= matrix(c(expression(1+.5*cos(t)),expression(1+.1*sin(t)),expression(-1)), nrow=1,ncol=3,byrow=TRUE)
alphaN=dataSet[1,]
curvature(alphaN, t)
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
print(alphaPrimeMatrix[2,1])
print(alphaPrimeMatrix[2,2])
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),0)
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),0)
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
curvature(alphaN, t)
curvature(alphaN, 1)
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
print(alphaPrimeMatrix[2,1])
print(alphaPrimeMatrix[2,2])
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),eval(alphaPrimeMatrix[2,3]))
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),eval(alphaPrimeMatrix[3,3]))
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
dataSet= matrix(c(expression(1+.5*cos(t)),expression(1+.1*sin(t)),expression(sin(t))), nrow=1,ncol=3,byrow=TRUE)
alphaN=dataSet[1,]
curvature(alphaN, 1)
source("../Scripts/xprod_util.R")
source(".././Scripts/xprod_util.R")
source("Scripts/xprod_util.R")
source
source
source("Scripts/xprod_util.R")
d_util = new.env()
d_util$alphaDerivativeMat <- function(alpha, t){
#First deriveative of input curve
alphaP <- c(D(alpha[1],'t'), D(alpha[2],'t'),D(alpha[3],'t'))
#Second derivative of input curve
alphaDP <- c(D(D(alpha[1],'t'),'t'),D(D(alpha[2],'t'),'t'),D(D(alpha[3],'t'),'t'))
#Matrix containing vector expressions of first three derivatives of input curve
alphaPrimeMatrix <-matrix(
c(alpha,alphaP,alphaDP),
nrow=3,
ncol=3,
byrow=TRUE
)
print(alphaPrimeMatrix[1,])
print(alphaPrimeMatrix[2,])
print(alphaPrimeMatrix[3,])
dimnames(alphaPrimeMatrix)=list(c("alpha","alphaP","alphaDP"),c("X","Y","Z"))
return(alphaPrimeMatrix)
}
xprod_util = new.env()
xprod_util$xprod <- function(...) {
args <- list(...)
if (length(args) == 0) {
stop("No data supplied")
}
len <- unique(sapply(args, FUN=length))
if (length(len) > 1) {
stop("All vectors must be the same length")
}
if (len != length(args) + 1) {
stop("Must supply N-1 vectors of length N")
}
m <- do.call(rbind, args)
sapply(seq(len),
FUN=function(i) {
det(m[,-i,drop=FALSE]) * (-1)^(i+1)
})
}
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
source("Scripts/xprod_util.R")
source("Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
print(alphaPrimeMatrix[2,1])
print(alphaPrimeMatrix[2,2])
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),eval(alphaPrimeMatrix[2,3]))
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),eval(alphaPrimeMatrix[3,3]))
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
source("Scripts/xprod_util.R")
source("Scripts/d_util.R")
source("./Scripts/xprod_util.R")
source("Scripts/xprod_util.R")
d_util = new.env()
d_util$alphaDerivativeMat <- function(alpha, t){
#First deriveative of input curve
alphaP <- c(D(alpha[1],'t'), D(alpha[2],'t'),D(alpha[3],'t'))
#Second derivative of input curve
alphaDP <- c(D(D(alpha[1],'t'),'t'),D(D(alpha[2],'t'),'t'),D(D(alpha[3],'t'),'t'))
#Matrix containing vector expressions of first three derivatives of input curve
alphaPrimeMatrix <-matrix(
c(alpha,alphaP,alphaDP),
nrow=3,
ncol=3,
byrow=TRUE
)
print(alphaPrimeMatrix[1,])
print(alphaPrimeMatrix[2,])
print(alphaPrimeMatrix[3,])
dimnames(alphaPrimeMatrix)=list(c("alpha","alphaP","alphaDP"),c("X","Y","Z"))
return(alphaPrimeMatrix)
}
xprod_util = new.env()
xprod_util$xprod <- function(...) {
args <- list(...)
if (length(args) == 0) {
stop("No data supplied")
}
len <- unique(sapply(args, FUN=length))
if (length(len) > 1) {
stop("All vectors must be the same length")
}
if (len != length(args) + 1) {
stop("Must supply N-1 vectors of length N")
}
m <- do.call(rbind, args)
sapply(seq(len),
FUN=function(i) {
det(m[,-i,drop=FALSE]) * (-1)^(i+1)
})
}
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
print(alphaPrimeMatrix[2,1])
print(alphaPrimeMatrix[2,2])
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),eval(alphaPrimeMatrix[2,3]))
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),eval(alphaPrimeMatrix[3,3]))
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
curvature <- function(alpha,t){
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
print(alphaPrimeMatrix[2,1])
print(alphaPrimeMatrix[2,2])
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),eval(alphaPrimeMatrix[2,3]))
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),eval(alphaPrimeMatrix[3,3]))
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
source("./Scripts/xprod_util.R")
source("./Scripts/d_util.R")
curvature <- function(alpha,t){
alphaPrimeMatrix <- d_util$alphaDerivativeMat(alpha,t)
print(alphaPrimeMatrix[2,1])
print(alphaPrimeMatrix[2,2])
alphaP <- c(eval(alphaPrimeMatrix[2,1]),eval(alphaPrimeMatrix[2,2]),eval(alphaPrimeMatrix[2,3]))
alphaDP <- c(eval(alphaPrimeMatrix[3,1]),eval(alphaPrimeMatrix[3,2]),eval(alphaPrimeMatrix[3,3]))
normCross <-xprod_util$xprod(alphaP,alphaDP)
normAD <-norm(as.matrix(normCross),"F")
normAP <-norm(as.matrix(alphaP),"F")
kAlpha = normAD /(normAP^3)
return(kAlpha)
}
dataSet= matrix(c(expression(1+.5*cos(t)),expression(1+.1*sin(t)),expression(-1)), nrow=1,ncol=3,byrow=TRUE)
alphaN=dataSet[1,]
curvature(alphaN, 2)
source('~/DiffGeomRPackages/Curvature_R_package/R/curvature.R')
dataSet= matrix(c(expression(1+.5*cos(t)),expression(1+.1*sin(t)),expression(-1)), nrow=1,ncol=3,byrow=TRUE)
alphaN=dataSet[1,]
curvature(alphaN,1)
